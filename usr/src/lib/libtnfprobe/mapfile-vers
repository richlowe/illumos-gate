#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

SYMBOL_VERSION SUNWprivate_1.1 {
    global:
	fork				{ FLAGS = NODIRECT; };
	fork1;
	pthread_create;
	pthread_exit;
	_resume_ret;
	thr_create;
	thr_exit;
	tnf_allocate;
	tnf_char_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_float32_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_float64_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_int16_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_int32_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_int64_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_int8_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_lwpid_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_name_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_non_threaded_test_addr	{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_opaque_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_pid_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	__tnf_probe_alloc;
	tnf_probe_debug;
	tnf_probe_event_tag_data	{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_probe_get_arg_indexed;
	tnf_probe_get_chars;
	tnf_probe_get_num_args;
	tnf_probe_get_type_indexed;
	tnf_probe_get_value;
	__tnf_probe_list_head		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	__tnf_probe_list_valid		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = 4;
						};
					};
	__tnf_probe_memseg_p		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	__tnf_probe_notify;
	__tnf_probe_thr_sync		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	__tnf_probe_version_1_info	{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize[2];
						};
					};
	tnf_process_disable;
	tnf_process_enable;
	tnf_ref32_1;
	tnf_size_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_string_1;
	tnf_string_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_struct_tag_1;
	tnf_tag_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	__tnf_tag_version_1_info	{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize[2];
						};
					};
	tnf_thread_disable;
	tnf_threaded_test_addr		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_thread_enable;
	tnf_time_base_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_time_delta_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_trace_alloc;
	tnf_trace_commit;
	tnf_trace_end;
	tnf_trace_file_min		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = 4;
						};
					};
	tnf_trace_file_name		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = 1024;
						};
					};
	tnf_trace_file_size		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = 4;
						};
					};
	tnf_trace_rollback;
	tnf_uint16_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_uint32_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_uint64_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_uint8_tag_data		{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	tnf_user_struct_properties	{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};
	_tnfw_b_control			{
					  ASSERT = {
						  TYPE = OBJECT;
						  SIZE = addrsize;
						};
					};

$if _sparc
	thr_stksegment;
$endif

    local:
	*;
};
