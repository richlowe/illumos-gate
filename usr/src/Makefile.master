#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 1989, 2010, Oracle and/or its affiliates. All rights reserved.
# Copyright (c) 2012 by Delphix. All rights reserved.
# Copyright 2014 Garrett D'Amore <garrett@damore.org>
# Copyright 2015, OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2015 Gary Mills
# Copyright 2015 Igor Kozhukhov <ikozhukhov@gmail.com>
# Copyright 2016 Toomas Soome <tsoome@me.com>
# Copyright 2019 RackTop Systems.
# Copyright 2020 Oxide Computer Company
# Copyright 2020 Peter Tribble
# Copyright 2021 OmniOS Community Edition (OmniOSce) Association.
# Copyright 2021 Joyent, Inc.
#

#
# Makefile.master, global definitions for system source
#
ROOT=		/proto

#
# Adjunct root, a system root image used to find headers, libraries, and files
# for the target machine.  None of these files are valid to use on the build
# machine.
#
ADJUNCT_PROTO=
# HAVE_ADJUNCT_PROTO - ADJUNCT_PROTO is set to a non-default value
# NO_ADJUNCT_PROTO - ADJUNCT_PROTO is unset
#
# This works by replacing any value in ADJUNCT_PROTO with POUND_SIGN, which
# only happens if it has some value, and then setting HAVE_ADJUNCT_PROTO
# oppositely.
NO_ADJUNCT_PROTO=$(ADJUNCT_PROTO:%=$(POUND_SIGN))
$(NO_ADJUNCT_PROTO)HAVE_ADJUNCT_PROTO=$(POUND_SIGN)

#
# Adjunct for building things that run on the build machine, none of these
# files are valid to use for the target machine.
#
NATIVE_ADJUNCT=	/usr

#
# Compatibility code for FreeBSD etc.
#
COMPAT=	$(SRC)/compat
CONTRIB= $(SRC)/contrib

#
# RELEASE_BUILD should be cleared for final release builds.
# NOT_RELEASE_BUILD is exactly what the name implies.
#
# The declaration POUND_SIGN is always '#'. This is needed to get around the
# make feature that '#' is always a comment delimiter, even when escaped or
# quoted. We use this macro expansion method to get POUND_SIGN rather than
# always breaking out a shell because the general case can cause a noticable
# slowdown in build times when so many Makefiles include Makefile.master.
#
# While the majority of users are expected to override the setting below
# with an env file (via nightly or bldenv), if you aren't building that way
# (ie, you're using "ws" or some other bootstrapping method) then you need
# this definition in order to avoid the subshell invocation mentioned above.
#

PRE_POUND=				pre\#
POUND_SIGN=				$(PRE_POUND:pre\%=%)

NOT_RELEASE_BUILD=
RELEASE_BUILD=				$(POUND_SIGN)
$(RELEASE_BUILD)NOT_RELEASE_BUILD=	$(POUND_SIGN)
PATCH_BUILD=				$(POUND_SIGN)

# SPARC_BLD is '#' for an Intel or aarch64 build.
# INTEL_BLD is '#' for a Sparc or aarch64 build.
# AARCH64_BLD is '#' for an Intel or Sparc build.
sparc_SPARC_BLD=
i386_SPARC_BLD=		$(POUND_SIGN)
aarch64_SPARC_BLD=	$(POUND_SIGN)
SPARC_BLD=		$($(MACH)_SPARC_BLD)

sparc_INTEL_BLD=	$(POUND_SIGN)
i386_INTEL_BLD=
aarch64_INTEL_BLD=	$(POUND_SIGN)
INTEL_BLD=		$($(MACH)_INTEL_BLD)

sparc_AARCH64_BLD=	$(POUND_SIGN)
i386_AARCH64_BLD=	$(POUND_SIGN)
aarch64_AARCH64_BLD=
AARCH64_BLD=		$($(MACH)_AARCH64_BLD)

# XXXARM: So we can gate things off from the AArch64 build in development
sparc_NOT_AARCH64_BLD=
i386_NOT_AARCH64_BLD=
aarch64_NOT_AARCH64_BLD=	$(POUND_SIGN)
NOT_AARCH64_BLD=		$($(MACH)_NOT_AARCH64_BLD)


# CROSS_BLD is "#" if NATIVE_MACH and MACH are the same, and the empty string
# otherwise. NATIVE_BLD is the opposite.
CROSS_BLD_1=		$(NATIVE_MACH:$(MACH)=$(POUND_SIGN))
CROSS_BLD=		$(CROSS_BLD_1:$(NATIVE_MACH)=)
NATIVE_BLD=
$(CROSS_BLD)NATIVE_BLD=	$(POUND_SIGN)

# Allow build-time "configuration" to enable or disable some things.
# The default is POUND_SIGN, meaning "not enabled". If the environment
# passes in an override like ENABLE_SMB_PRINTING= (empty) that will
# uncomment things in the lower Makefiles to enable the feature.
ENABLE_SMB_PRINTING=	$(POUND_SIGN)

# BUILD_TOOLS is the root of all tools including compilers.
# ONBLD_TOOLS is the root of all the tools that are part of SUNWonbld.

BUILD_TOOLS=		/ws/onnv-tools
ONBLD_TOOLS=		$(BUILD_TOOLS)/onbld

# define runtime JAVA_HOME, primarily for cmd/pools/poold
JAVA_HOME=	/usr/java
# define buildtime JAVA_ROOT
JAVA_ROOT=	/usr/java
# Build uses java8 by default.  Pass the variable below set to empty
# string in the environment to override.
BLD_JAVA_11=	$(POUND_SIGN)

i386_GNUC_ROOT=		/usr/gcc/10
aarch64_GNUC_ROOT=	/usr/gcc/10
NATIVE_GNUC_ROOT=	$($(NATIVE_MACH)_GNUC_ROOT)
GNUC_ROOT=		$($(MACH)_GNUC_ROOT)
GCCLIBDIR=		$(GNUC_ROOT)/lib
GCCLIBDIR64=		$(GNUC_ROOT)/lib/$(MACH64)

DOCBOOK_XSL_ROOT=	/usr/share/sgml/docbook/xsl-stylesheets

RPCGEN=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/rpcgen
ELFEXTRACT=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/elfextract
MBH_PATCH=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/mbh_patch
BTXLD=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/btxld
VTFONTCVT=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/vtfontcvt
# echo(1) and true(1) are specified without absolute paths, so that the shell
# spawned by make(1) may use the built-in versions.  This is minimally
# problematic, as the shell spawned by make(1) is known and under control, the
# only risk being if the shell falls back to $PATH.
#
# We specifically want an echo(1) that does interpolation of escape sequences,
# which ksh93, /bin/sh, and bash will all provide.
ECHO=		echo
TRUE=		true
INS=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/install
ED=		/usr/bin/ed
SYMLINK=	/usr/bin/ln -s
LN=		/usr/bin/ln
MKDIR=		/usr/bin/mkdir
CHMOD=		/usr/bin/chmod
MV=		/usr/bin/mv -f
RM=		/usr/bin/rm -f
CUT=		/usr/bin/cut
NM=		/usr/bin/nm
DIFF=		/usr/bin/diff
GREP=		/usr/bin/grep
EGREP=		/usr/bin/egrep
ELFWRAP=	/usr/bin/elfwrap
KSH93=		/usr/bin/ksh93
SED=		/usr/bin/sed
AWK=		/usr/bin/nawk
CP=		/usr/bin/cp -f
MCS=		/usr/bin/mcs
CAT=            /usr/bin/cat
ELFDUMP=	/usr/bin/elfdump
M4=		/usr/bin/m4
GM4=		/usr/bin/gm4
STRIP=		/usr/bin/strip
LEX=		/usr/bin/lex
FLEX=		/usr/bin/flex
YACC=		/usr/bin/yacc
BISON=		/usr/bin/bison
CPP=		/usr/lib/cpp
SH=		/usr/bin/sh
ANSI_CPP=	$(GNUC_ROOT)/bin/cpp
JAVAC=		$(JAVA_ROOT)/bin/javac
JAVADOC=	$(JAVA_ROOT)/bin/javadoc
JAR=		$(JAVA_ROOT)/bin/jar
CTFCONVERT=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ctfconvert
CTFDIFF=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ctfdiff
CTFMERGE=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ctfmerge
CTFSTABS=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ctfstabs
CTFSTRIP=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ctfstrip
NDRGEN=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/ndrgen
# XXXARM: Only used by aarch64 right now, should use everywhere
$(AARCH64_BLD)GENASSYM=	$(ONBLD_TOOLS)/bin/genassym
GENOFFSETS=	$(ONBLD_TOOLS)/bin/genoffsets
XREF=		$(ONBLD_TOOLS)/bin/xref
FIND=		/usr/bin/find
PERL=		/usr/bin/perl
PERL_VERSION=	5.10.0
PERL_PKGVERS=	-510
PERL_MACH=	i86pc
$(SPARC_BLD)PERL_MACH=	sun4
PERL_VARIANT=
PERL_ARCH=	$(PERL_MACH)-solaris$(PERL_VARIANT)-64int
PERL_ARCH64=	$(PERL_MACH)-solaris$(PERL_VARIANT)-64
$(AARCH64_BLD)BUILDPERL32=	$(POUND_SIGN)
PYTHON3_VERSION=	3.9
PYTHON3_PKGVERS=	-39
PYTHON3_SUFFIX=
PYTHON3=		/usr/bin/python$(PYTHON3_VERSION)
# BUILDPY3b should be overridden in the env file in order to build python
# modules with a secondary python to aid migration between versions.
BUILDPY3b=		$(POUND_SIGN)
PYTHON3b_VERSION=	3.5
PYTHON3b_PKGVERS=	-35
PYTHON3b_SUFFIX=	m
#
$(BUILDPY3b)PYTHON3b=	/usr/bin/python$(PYTHON3b_VERSION)
TOOLS_PYTHON=		$(PYTHON3)
SORT=		/usr/bin/sort
TR=		/usr/bin/tr
TOUCH=		/usr/bin/touch
WC=		/usr/bin/wc
XARGS=		/usr/bin/xargs
ELFEDIT=	/usr/bin/elfedit
DTRACE=		/usr/sbin/dtrace -xnolibs
UNIQ=		/usr/bin/uniq
TAR=		/usr/bin/tar
ASTBINDIR=	/usr/ast/bin
MSGCC=		$(ASTBINDIR)/msgcc
MSGFMT=		/usr/bin/msgfmt -s
LCDEF=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/localedef
TIC=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/tic
ZIC=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/zic
OPENSSL=	/usr/bin/openssl
CPCGEN=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/cpcgen
GENICONVTBL=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/geniconvtbl
SVCCONFIGD=	$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/svc.configd
SVCCFG=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/svccfg

DEFAULT_CONSOLE_COLOR=					\
	-DDEFAULT_ANSI_FOREGROUND=ANSI_COLOR_WHITE	\
	-DDEFAULT_ANSI_BACKGROUND=ANSI_COLOR_BLACK

FILEMODE=	644
DIRMODE=	755

# Declare that nothing should be built in parallel.
# Individual Makefiles can use the .PARALLEL target to declare otherwise.
.NO_PARALLEL:

# For stylistic checks
#
# Note that the X and C checks are not used at this time and may need
# modification when they are actually used.
#
CSTYLE=		$(ONBLD_TOOLS)/bin/cstyle
CSTYLE_TAIL=
HDRCHK=		$(ONBLD_TOOLS)/bin/hdrchk
HDRCHK_TAIL=
JSTYLE=		$(ONBLD_TOOLS)/bin/jstyle

DOT_H_CHECK=	\
	@$(ECHO) "checking $<"; $(CSTYLE) $< $(CSTYLE_TAIL); \
	$(HDRCHK) $< $(HDRCHK_TAIL)

DOT_X_CHECK=	\
	@$(ECHO) "checking $<"; $(RPCGEN) -C -h $< | $(CSTYLE) $(CSTYLE_TAIL); \
	$(RPCGEN) -C -h $< | $(HDRCHK) $< $(HDRCHK_TAIL)

DOT_C_CHECK=	\
	@$(ECHO) "checking $<"; $(CSTYLE) $< $(CSTYLE_TAIL)

MANIFEST_CHECK=	\
	@$(ECHO) "checking $<"; \
	SVCCFG_DTD=$(SRC)/cmd/svc/dtd/service_bundle.dtd.1 \
	SVCCFG_REPOSITORY=$(SRC)/cmd/svc/seed/global.db \
	SVCCFG_CONFIGD_PATH=$(SVCCONFIGD) \
	$(SVCCFG) validate $<

INS.file=	$(RM) $@; $(INS) -s -m $(FILEMODE) -f $(@D) $<
INS.dir=	$(INS) -s -d -m $(DIRMODE) $@
# installs and renames at once
#
INS.rename=	$(INS.file); $(MV) $(@D)/$(<F) $@

# install a link
INSLINKTARGET=	$<
INS.link=	$(RM) $@; $(LN) $(INSLINKTARGET) $@
INS.symlink=	$(RM) $@; $(SYMLINK) $(INSLINKTARGET) $@

# The path to python that will be used for the shebang line when installing
# python scripts to the proto area. This is overridden by makefiles to
# select to the correct version.
PYSHEBANG=	$(PYTHON3)

#
# Python bakes the mtime of the .py file into the compiled .pyc and
# rebuilds if the baked-in mtime != the mtime of the source file
# (rather than only if it's less than), thus when installing python
# files we must make certain to not adjust the mtime of the source
# (.py) file.
#
INS.pyfile=	$(RM) $@; $(SED) \
		-e "1s:^\#!@PYTHON@:\#!$(PYSHEBANG):" \
		-e "1s:^\#!@TOOLS_PYTHON@:\#!$(TOOLS_PYTHON):" \
		< $< > $@; $(CHMOD) $(FILEMODE) $@; $(TOUCH) -r $< $@

# MACH must be set in the shell environment per uname -p on the build host
# More specific architecture variables should be set in lower makefiles.
#
# MACH64 is derived from MACH, and BUILD64 is set to `#' for
# architectures on which we do not build 64-bit versions.
# (There are no such architectures at the moment.)
#
# Set BUILD64=# in the environment to disable 64-bit amd64
# builds on i386 machines.

sparc_MACH64=	sparcv9
i386_MACH64=	amd64
aarch64_MACH64=	aarch64
MACH64=		$($(MACH)_MACH64)

sparc_MACH32=	sparcv7
i386_MACH32=	i86
# We have no support for 32bit arm, but it proves necessary in the build to
# have MACH32 set to _something_ to avoid rule collisions when it is empty
aarch64_MACH32=	aarch32
MACH32=		$($(MACH)_MACH32)

sparc_BUILD64=
i386_BUILD64=
aarch64_BUILD64=
BUILD64=	$($(MACH)_BUILD64)

sparc_BUILD32=
i386_BUILD32=
aarch64_BUILD32=	$(POUND_SIGN)
BUILD32=		$($(MACH)_BUILD32)

#
# C compiler verbose mode. This is so we can enable it globally,
# but turn it off in the lower level makefiles of things we cannot
# (or aren't going to) fix.
#
CCVERBOSE=		-v

#
# generate v9 code which tolerates callers using the v7 ABI, for the sake of
# system calls.
CC32BITCALLERS=		-_gcc=-massume-32bit-callers

# GCC, especially, is increasingly beginning to auto-inline functions and
# sadly does so separately not under the general -fno-inline-functions
# Additionally, we wish to prevent optimisations which cause GCC to clone
# functions -- in particular, these may cause unhelpful symbols to be
# emitted instead of function names
CCNOAUTOINLINE= \
	-_gcc=-fno-inline-small-functions \
	-_gcc=-fno-inline-functions-called-once \
	-_gcc=-fno-ipa-cp \
	-_gcc=-fno-ipa-icf \
	-_gcc=-fno-clone-functions

# GCC may put functions in different named sub-sections of .text based on
# their presumed calling frequency.  At least in the kernel, where we actually
# deliver relocatable objects, we don't want this to happen.
#
# Since at present we don't benefit from this even in userland, we disable it globally,
# but the application of this may move into usr/src/uts/ in future.
CCNOREORDER=	-_gcc=-fno-reorder-functions \
		-_gcc=-fno-reorder-blocks-and-partition

#
# gcc has a rather aggressive optimization on by default that infers loop
# bounds based on undefined behavior (!!).  This can lead to some VERY
# surprising optimizations -- ones that may be technically correct in the
# strictest sense but also result in incorrect program behavior.  We turn
# this optimization off, with extreme prejudice.
#
CCNOAGGRESSIVELOOPS= -_gcc=-fno-aggressive-loop-optimizations

#
# gcc has a limit on the maximum size of a function which will be inlined
# in the presence of the 'inline' keyword; this limit varies between versions
# of gcc. For consistent output and to ensure that some of the slightly larger
# functions are inlined as intended, we specify the limit explicitly.
#
CCINLINESIZE= -_gcc=--param=max-inline-insns-single=450
CCWARNINLINE= -_gcc=-Winline

#
# Options to control which version of stack-protector we enable. This
# gives us a bit of flexibility and is unfortunately necessary as some
# modules do not function correctly with our defaults (qede).
#
#  o STACKPROTECT_              Sets the appropriate version for the compiler
#  o STACKPROTECT_strong        Sets us to use strong on all of the
#                               compilers it supports. This is the same
#                               as the default.
#
#  o STACKPROTECT_none          Disables the stack protector.
#
#  o STACKPROTECT_all           Enables it for everything.
#
#  o STACKPROTECT_basic         Enables the basic stack protector.
#
# -fstack-protector-strong is not available in gcc4 which is why we
# have per-compiler versions below. These are not added to the default
# global CFLAGS at this time as it's being incrementally enabled
# throughout the build.
#
STACKPROTECT_           = -_gcc=-fstack-protector-strong

STACKPROTECT_strong     = $(STACKPROTECT_)
STACKPROTECT_none       =
STACKPROTECT_all        = -_gcc=-fstack-protector-all
STACKPROTECT_basic      = -_gcc=-fstack-protector

STACKPROTECT_LD_	= -lssp_ns
STACKPROTECT_LD_none	=
STACKPROTECT_LD_all	= $(STACKPROTECT_LD_)
STACKPROTECT_LD_basic	= $(STACKPROTECT_LD_)

CCSTACKPROTECT= $(STACKPROTECT_$(STACKPROTECT))
LDSTACKPROTECT= $(STACKPROTECT_LD_$(STACKPROTECT))

#
# compiler '-xarch' flag. This is here to centralize it and make it
# overridable for testing.
sparc_XARCH=	-m32
sparcv9_XARCH=	-m64
i386_XARCH=	-m32
amd64_XARCH=	-m64 -Ui386 -U__i386 -_gcc=-mtune=opteron
aarch64_XARCH=

#
# These flags define what we need to be 'standalone' i.e. -not- part
# of the rather more cosy userland environment.  This basically means
# the kernel.
#
# XX64	future versions of gcc will make -mcmodel=kernel imply -mno-red-zone
#
sparc_STAND_FLAGS=	-_gcc=-ffreestanding
sparcv9_STAND_FLAGS=	-_gcc=-ffreestanding
# Disabling MMX also disables 3DNow, disabling SSE also disables all later
# additions to SSE (SSE2, AVX ,etc.)
NO_SIMD=		-_gcc=-mno-mmx -_gcc=-mno-sse
i386_STAND_FLAGS=	-_gcc=-ffreestanding $(NO_SIMD)
amd64_STAND_FLAGS=	-_gcc=-ffreestanding -_gcc=-mno-red-zone \
	-_gcc=-mcmodel=kernel $(NO_SIMD)
aarch64_STAND_FLAGS=	-_gcc=-ffreestanding -_gcc=-mgeneral-regs-only \
	-_gcc=-mstrict-align

# XXXARM:
# We need to use the large model for the kernel, because we put module text
# and data so far apart.  Following x86 and sparc, we put data in
# heap32_arena, and text in heaptext_arena, but in their default setup,
# there's a huge gap between them.  It may be in our interests to reduce this
# gap to within 4G of VA, and use a medium model.
aarch64_STAND_FLAGS += -_gcc=-mcmodel=large

SAVEARGS=		-_gcc=-msave-args
amd64_STAND_FLAGS	+= $(SAVEARGS)

STAND_FLAGS_32 = $($(MACH)_STAND_FLAGS)
STAND_FLAGS_64 = $($(MACH64)_STAND_FLAGS)

#
# turn warnings into errors (C)
CERRWARN = -errtags=yes -errwarn=%all

CERRWARN += -_gcc=-Wno-missing-braces
CERRWARN += -_gcc=-Wno-sign-compare
CERRWARN += -_gcc=-Wno-unknown-pragmas
CERRWARN += -_gcc=-Wno-unused-parameter
CERRWARN += -_gcc=-Wno-missing-field-initializers

# Unfortunately, this option can misfire very easily and unfixably.
CERRWARN +=	-_gcc=-Wno-array-bounds

CNOWARN_UNINIT = -_gcc=-Wno-maybe-uninitialized

CERRWARN += -_smatch=-p=illumos_user
include $(SRC)/Makefile.smatch

#
# turn warnings into errors (C++)
CCERRWARN = -errtags=yes -errwarn=%all

CCERRWARN += -_gcc=-Wno-missing-braces
CCERRWARN += -_gcc=-Wno-sign-compare
CCERRWARN += -_gcc=-Wno-unknown-pragmas
CCERRWARN += -_gcc=-Wno-unused-parameter
CCERRWARN += -_gcc=-Wno-missing-field-initializers

# C standard
CSTD_GNU89=	-xc99=%none
CSTD_GNU99=	-xc99=%all
CSTD=		$(CSTD_GNU89)

# In most places, assignments to these macros should be appended with +=
# (CPPFLAGS.first allows values to be prepended to CPPFLAGS).
sparc_CFLAGS=	$(sparc_XARCH)
sparcv9_CFLAGS=	$(sparcv9_XARCH) $(CCVERBOSE)
i386_CFLAGS=	$(i386_XARCH)
amd64_CFLAGS=	$(amd64_XARCH)

# XXXARM: Additional options here things that we specify outside the defaults
# because we hope to switch the system so the defaults are valid:
#
# outline-atomics -- need a library implementation for the atomics
# tls-dialect -- need an implementation of TLSDESC
aarch64_CFLAGS=	$(aarch64_XARCH) -_gcc=-mno-outline-atomics \
	-_gcc=-mtls-dialect=trad

$(MACH)_ASFLAGS=	$($(MACH)_CFLAGS)
$(MACH64)_ASFLAGS=	$($(MACH64)_CFLAGS)

ASFLAGS=		$(CSYSROOT) $($(MACH)_ASFLAGS)
ASFLAGS64=		$(CSYSROOT) $($(MACH64)_ASFLAGS)

#
sparc_COPTFLAG=		-xO3
sparcv9_COPTFLAG=	-xO3
i386_COPTFLAG=		-O
amd64_COPTFLAG=		-xO3
aarch64_COPTFLAG=	-O

COPTFLAG= $($(MACH)_COPTFLAG)
COPTFLAG64= $($(MACH64)_COPTFLAG)

# Sometimes we want all symbols and types in debugging information even
# if they aren't used.
CALLSYMS=	-_gcc=-fno-eliminate-unused-debug-symbols \
		-_gcc=-fno-eliminate-unused-debug-types

#
# We force the compilers to generate the debugging information best understood
# by the CTF tools.  With Sun Studio this is stabs due to bugs in the Studio
# compilers.  With GCC this is DWARF v2.
#
DEBUGFORMAT=	-_gcc=-gdwarf-2 -_gcc10=-gstrict-dwarf -_gcc11=-gstrict-dwarf

#
# Ask the compiler to include debugging information
#
CCGDEBUG= -g $(DEBUGFORMAT)

#
# Flags used to build in debug mode for ctf generation.
#
CTF_FLAGS_sparc	= $(CCGDEBUG) $(CSTD)
CTF_FLAGS_i386	= $(CCGDEBUG) $(CSTD)

CTF_FLAGS_sparcv9	= $(CTF_FLAGS_sparc)
CTF_FLAGS_amd64		= $(CTF_FLAGS_i386)
CTF_FLAGS_aarch64	= $(CCGDEBUG) $(CSTD) $(CNOGLOBAL)

CTF_FLAGS_32	= $(CTF_FLAGS_$(MACH))
CTF_FLAGS_64	= $(CTF_FLAGS_$(MACH64))
CTF_FLAGS	= $(CTF_FLAGS_32)
NATIVE_CTF_FLAGS= $(CTF_FLAGS_$(NATIVE_MACH))

#
# Flags used with genoffsets
#
GENOFFSETS_FLAGS = $(CALLSYMS)

OFFSETS_CREATE = $(GENOFFSETS) -s $(CTFSTABS) -r $(CTFCONVERT) \
	$(CW) --noecho $(CW_CC_COMPILERS) -- $(GENOFFSETS_FLAGS) \
	$(CFLAGS) $(CPPFLAGS)

OFFSETS_CREATE64 = $(GENOFFSETS) -s $(CTFSTABS) -r $(CTFCONVERT) \
	$(CW) --noecho $(CW_CC_COMPILERS) -- $(GENOFFSETS_FLAGS) \
	$(CFLAGS64) $(CPPFLAGS)

ASSYM_CREATE = $(GENASSYM) -- \
	$(CW) --noecho $(CW_CC_COMPILERS) -- $(CPPFLAGS)

# dmake SOURCEDEBUG=yes ... enables source-level debugging information, and
# avoids stripping it.
SOURCEDEBUG	= $(POUND_SIGN)
SRCDBGBLD	= $(SOURCEDEBUG:yes=)

$(HAVE_ADJUNCT_PROTO)CSYSROOT	= -_gcc=--sysroot=$(ADJUNCT_PROTO)

#
# These variables are intended ONLY for use by developers to safely pass extra
# flags to the compilers without unintentionally overriding Makefile-set
# flags.  They should NEVER be set to any value in a Makefile.
#
# They come last in the associated FLAGS variable such that they can
# explicitly override things if necessary, there are gaps in this, but it's
# the best we can manage.
#
CUSERFLAGS		=
CUSERFLAGS64		= $(CUSERFLAGS)
CCUSERFLAGS		=
CCUSERFLAGS64		= $(CCUSERFLAGS)

CSOURCEDEBUGFLAGS	=
CCSOURCEDEBUGFLAGS	=
$(SRCDBGBLD)CSOURCEDEBUGFLAGS	= $(CCGDEBUG)
$(SRCDBGBLD)CCSOURCEDEBUGFLAGS	= $(CCGDEBUG)

CFLAGS=         $(CSYSROOT) $(COPTFLAG) $($(MACH)_CFLAGS) \
		$(CERRWARN) $(CSTD) $(CCNOAUTOINLINE) $(CCNOREORDER) \
		$(CCNOAGGRESSIVELOOPS) $(CCINLINESIZE) \
		$(CSOURCEDEBUGFLAGS) $(CUSERFLAGS)
CFLAGS64=       $(CSYSROOT) $(COPTFLAG64) $($(MACH64)_CFLAGS) \
		$(CERRWARN) $(CSTD) $(CCNOAUTOINLINE) $(CCNOREORDER) \
		$(CCNOAGGRESSIVELOOPS) $(CCINLINESIZE) \
		$(CSOURCEDEBUGFLAGS) $(CUSERFLAGS64)
#
# Flags that are used to build parts of the code that are subsequently
# run on the build machine (also known as the NATIVE_BUILD).
#
NATIVE_CFLAGS=	$($(NATIVE_MACH)_COPTFLAG) $($(NATIVE_MACH)_CFLAGS) \
		$(CERRWARN) $(CSTD) $(CCNOAUTOINLINE) \
		$(CCNOREORDER) $(CCNOAGGRESSIVELOOPS) $(CCINLINESIZE) \
		$(CSOURCEDEBUGFLAGS) $(CUSERFLAGS)

NATIVE_ASFLAGS=	$(NATIVE_CFLAGS)

NATIVE_CCFLAGS=	$($(NATIVE_MACH)_CCOPTFLAG) $($(NATIVE_MACH)_CCFLAGS) \
		$(CCSOURCEDEBUGFLAGS) $(CCUSERFLAGS)

NATIVE_CFLAGS64=	$(COPTFLAG64) $($(NATIVE_MACH64)_CFLAGS) \
		$(CERRWARN) $(CSTD) $(CCNOAUTOINLINE) \
		$(CCNOREORDER) $(CCNOAGGRESSIVELOOPS) $(CCINLINESIZE) \
		$(CSOURCEDEBUGFLAGS) $(CUSERFLAGS64)

NATIVE_ASFLAGS64=	$(NATIVE_CFLAGS64)

NATIVE_CCFLAGS64=	$(CCOPTFLAG64) $($(NATIVE_MACH64)_CCFLAGS) \
		$(CCSOURCEDEBUGFLAGS) $(CCUSERFLAGS64)

DTEXTDOM=-DTEXT_DOMAIN=\"$(TEXT_DOMAIN)\"	# For messaging.
DTS_ERRNO=-D_TS_ERRNO
CPPFLAGS.first=	# Please keep empty.  Only lower makefiles should set this.
CPPFLAGS.master=$(DTEXTDOM) $(DTS_ERRNO) \
	$(ENVCPPFLAGS1) $(ENVCPPFLAGS2) $(ENVCPPFLAGS3) $(ENVCPPFLAGS4)
CPPFLAGS.native=$(ENVCPPFLAGS1) $(ENVCPPFLAGS2) $(ENVCPPFLAGS3) \
		$(ENVCPPFLAGS4) -I$(NATIVE_ADJUNCT)/include
# In most places, assignments to these macros should be appended with +=
# (CPPFLAGS.first allows values to be prepended to CPPFLAGS).
CPPFLAGS=	$(CPPFLAGS.first) $(CPPFLAGS.master)
AS_CPPFLAGS=	$(CPPFLAGS.first) $(CPPFLAGS.master)
JAVAFLAGS=	-source 7 -target 7 -Xlint:deprecation,-options
$(BLD_JAVA_11)JAVAFLAGS=	-source 7 -target 7 -Xlint:-options

#
# For source message catalogue
#
.SUFFIXES: $(SUFFIXES) .i .po
MSGROOT= $(ROOT)/catalog
MSGDOMAIN= $(MSGROOT)/$(TEXT_DOMAIN)
MSGDOMAINPOFILE = $(MSGDOMAIN)/$(POFILE)
DCMSGDOMAIN= $(MSGROOT)/LC_TIME/$(TEXT_DOMAIN)
DCMSGDOMAINPOFILE = $(DCMSGDOMAIN)/$(DCFILE:.dc=.po)

CLOBBERFILES += $(POFILE) $(POFILES)
COMPILE.cpp= $(CC) -E -C $(CFLAGS) $(CPPFLAGS)
XGETTEXT= /usr/bin/xgettext
XGETFLAGS= -c TRANSLATION_NOTE
GNUXGETTEXT= /usr/gnu/bin/xgettext
GNUXGETFLAGS= --add-comments=TRANSLATION_NOTE --keyword=_ \
	--strict --no-location --omit-header
BUILD.po= $(XGETTEXT) $(XGETFLAGS) -d $(<F) $<.i ;\
	$(RM)	$@ ;\
	$(SED) "/^domain/d" < $(<F).po > $@ ;\
	$(RM) $(<F).po $<.i

#
# This is overwritten by local Makefile when PROG is a list.
#
POFILE= $(PROG).po

sparc_CCFLAGS=		$(sparc_XARCH) $(CCERRWARN)
sparcv9_CCFLAGS=	$(sparcv9_XARCH) $(CCERRWARN)
i386_CCFLAGS=		$(i386_XARCH) $(CCERRWARN)
amd64_CCFLAGS=		$(amd64_XARCH) $(CCERRWARN)
aarch64_CCFLAGS=	$(aarch64_XARCH) -_gcc=-mno-outline-atomics $(CCERRWARN)

sparc_CCOPTFLAG=	-O
sparcv9_CCOPTFLAG=	-O
i386_CCOPTFLAG=		-O
amd64_CCOPTFLAG=	-O
aarch64_CCOPTFLAG=	-O -g1

CCOPTFLAG=	$($(MACH)_CCOPTFLAG)
CCOPTFLAG64=	$($(MACH64)_CCOPTFLAG)
CCFLAGS=	$(CSYSROOT) $(CCOPTFLAG) $($(MACH)_CCFLAGS) $(CCSOURCEDEBUGFLAGS) \
		$(CCUSERFLAGS)
CCFLAGS64=	$(CSYSROOT) $(CCOPTFLAG64) $($(MACH64)_CCFLAGS) $(CCSOURCEDEBUGFLAGS) \
		$(CCUSERFLAGS64)

#
#
#
ELFWRAP_FLAGS	=
ELFWRAP_FLAGS64	=	-64

#
# Various mapfiles that are used throughout the build, and delivered to
# /usr/lib/ld.
#
MAPFILE.NED_i386 =	$(SRC)/common/mapfiles/common/map.noexdata
MAPFILE.NED_sparc =
MAPFILE.NED =		$(MAPFILE.NED_$(MACH))
MAPFILE.PGA =		$(SRC)/common/mapfiles/common/map.pagealign
MAPFILE.NES =		$(SRC)/common/mapfiles/common/map.noexstk
MAPFILE.FLT =		$(SRC)/common/mapfiles/common/map.filter
MAPFILE.LEX =		$(SRC)/common/mapfiles/common/map.lex.yy

#
# Generated mapfiles that are compiler specific, and used throughout the
# build.  These mapfiles are not delivered in /usr/lib/ld.
#
MAPFILE.NGB_sparc =	$(SRC)/common/mapfiles/gen/sparc_gcc_map.noexeglobs
MAPFILE.NGB_sparcv9 =	$(SRC)/common/mapfiles/gen/sparcv9_gcc_map.noexeglobs
MAPFILE.NGB_i386 =	$(SRC)/common/mapfiles/gen/i386_gcc_map.noexeglobs
MAPFILE.NGB_amd64 =	$(SRC)/common/mapfiles/gen/amd64_gcc_map.noexeglobs
MAPFILE.NGB_aarch64 =	$(SRC)/common/mapfiles/gen/aarch64_gcc_map.noexeglobs
MAPFILE.NGB =		$(MAPFILE.NGB_$(MACH))

#
# A generic interface mapfile name, used by various dynamic objects to define
# the interfaces and interposers the object must export.
#
MAPFILE.INT =		mapfile-intf

#
# LDLIBS32 and LDLIBS64 can be set in the environment to override the following
# assignments.
#
LDLIBS32 =	$(ENVLDLIBS1) $(ENVLDLIBS2) $(ENVLDLIBS3)
LDLIBS.cmd =	$(LDLIBS32)
LDLIBS.lib =	$(LDLIBS32)

LDLIBS64 =	$(ENVLDLIBS1:%=%/$(MACH64)) \
		$(ENVLDLIBS2:%=%/$(MACH64)) \
		$(ENVLDLIBS3:%=%/$(MACH64))

# XXXARM: We're not multilib, so these both go to the same place, but this
# needs to be managed more tidily
$(AARCH64_BLD)LDLIBS64 = $(LDLIBS32)

sparc_LD_TARGET =	$(MACH)
i386_LD_TARGET =	x86
aarch64_LD_TARGET =	$(MACH)
LD_TARGET =	-z target=$($(MACH)_LD_TARGET)
LD_TARGET64 =	-z target=$($(MACH)_LD_TARGET)

#
# Define compilation macros.
#
COMPILE.c=	$(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE64.c=	$(CC) $(CFLAGS64) $(CPPFLAGS) -c
COMPILE.cc=	$(CCC) $(CCFLAGS) $(CPPFLAGS) -c
COMPILE64.cc=	$(CCC) $(CCFLAGS64) $(CPPFLAGS) -c
COMPILE.s=	$(AS) $(ASFLAGS) $(AS_CPPFLAGS) -c
COMPILE64.s=	$(AS) $(ASFLAGS64) $(AS_CPPFLAGS) -c
COMPILE.d=	$(DTRACE) -G -32
COMPILE64.d=	$(DTRACE) -G -64
COMPILE.b=	$(ELFWRAP) $(ELFWRAP_FLAGS$(CLASS))
COMPILE64.b=	$(ELFWRAP) $(ELFWRAP_FLAGS$(CLASS))

CLASSPATH=	.
COMPILE.java=	$(JAVAC) $(JAVAFLAGS) -classpath $(CLASSPATH)

#
# Link time macros
#
CCNEEDED	= -L$(GCCLIBDIR) -lstdc++ -lgcc_s
CCEXTNEEDED	= $(CCNEEDED)
NATIVECCNEEDED	= -R$(GCCLIBDIR) -L$(GCCLIBDIR) -lstdc++ -lgcc_s

CCNEEDED64	= -L$(GCCLIBDIR) -lstdc++ -lgcc_s
NATIVECCNEEDED64 = -R$(GCCLIBDIR) -L$(GCCLIBDIR) -lstdc++ -lgcc_s
CCEXTNEEDED	= $(CCNEEDED64)

# Libraries which we expect to reference via either the build machine or
# ADJUNCT_PROTO, or, when building native components, the NATIVE_PROTO, rather
# than our own proto area.
ADJUNCT_LIBS=

LDCHECKS		= $(ZASSERTDEFLIB) $(ZGUIDANCE) $(ZFATALWARNINGS)
LDCHECKS		+= $(ADJUNCT_LIBS:%=$(ZASSERTDEFLIB)=%)

LINK.c=			$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(LDCHECKS)
LINK64.c=		$(CC) $(CFLAGS64) $(CPPFLAGS) $(LDFLAGS) $(LDCHECKS)
NORUNPATH=		-nolib
LINK.cc=		$(CCC) $(CCFLAGS) $(CPPFLAGS) $(NORUNPATH) \
			$(LDFLAGS) $(CCNEEDED) $(LDCHECKS)
LINK64.cc=		$(CCC) $(CCFLAGS64) $(CPPFLAGS) $(NORUNPATH) \
			$(LDFLAGS) $(CCNEEDED64) $(LDCHECKS)


NATIVE_MACH=		$(MACH:amd64=i386)
i386_NATIVE_MACH64=	amd64
sparc_NATIVE_MACH64=	sparcv9
aarch64_NATIVE_MACH64=	aarch64
NATIVE_MACH64=		$($(NATIVE_MACH)_MACH64)

# Define native compilation macros
#

# Base directory where compilers are loaded.
# Defined here so it can be overridden by developer.
#
i386_GNU_ROOT=		/usr
sparc_GNU_ROOT=		/usr
aarch64_GNU_ROOT=	/usr
GNU_ROOT=		$($(MACH)_GNU_ROOT)

# XXXARM: Used building the booters etc, overriden
GLD=		$(GNU_ROOT)/bin/gld
OBJCOPY=	$(GNU_ROOT)/bin/gobjcopy
MKIMAGE=	/usr/bin/mkimage
DTC=		/usr/bin/dtc

i386_PRIMARY_CC=	gcc10,$(i386_GNUC_ROOT)/bin/gcc,gnu
i386_PRIMARY_CCC=	gcc10,$(i386_GNUC_ROOT)/bin/g++,gnu
aarch64_PRIMARY_CC=	gcc10,$(aarch64_GNUC_ROOT)/bin/gcc,gnu
aarch64_PRIMARY_CCC=	gcc10,$(aarch64_GNUC_ROOT)/bin/g++,gnu

CW_CC_COMPILERS=	$($(MACH)_PRIMARY_CC:%=--primary %) \
			$($(MACH)_SHADOW_CCS:%=--shadow %)
CW_CCC_COMPILERS=	$($(MACH)_PRIMARY_CCC:%=--primary %) \
			$($(MACH)_SHADOW_CCCS:%=--shadow %)
NATIVE_CW_CC_COMPILERS=	$($(NATIVE_MACH)_PRIMARY_CC:%=--primary %) \
			$($(NATIVE_MACH)_SHADOW_CCS:%=--shadow %)
NATIVE_CW_CCC_COMPILERS=$($(NATIVE_MACH)_PRIMARY_CCC:%=--primary %) \
			$($(NATIVE_MACH)_SHADOW_CCCS:%=--shadow %)

CW_LINKER=		--linker $(LD)

# Specify platform compiler versions for languages
# that we use (currently only c and c++).
#
CW=			$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/cw
NATIVE_CW=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH)/cw

BUILD_CC=		$(CW) $(CW_LINKER) $(CW_CC_COMPILERS) --
NATIVEBUILD_CC=		$(NATIVE_CW) $(CW_LINKER) $(NATIVE_CW_CC_COMPILERS) --
BUILD_CCC=		$(CW) -C $(CW_LINKER) $(CW_CCC_COMPILERS) --
NATIVEBUILD_CCC=	$(NATIVE_CW) -C $(CW_LINKER) \
			$(NATIVE_CW_CCC_COMPILERS) --
BUILD_CPP=		/usr/lib/cpp
# XXXARM: Need a cross-cpp build in tools
NATIVEBUILD_CPP=	/usr/lib/cpp
BUILD_LD=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH64)/ld
NATIVEBUILD_LD=		$(ONBLD_TOOLS)/bin/$(NATIVE_MACH64)/ld
NATIVEBUILD_AS=		$(NATIVEBUILD_CC)

$(MACH)_CC=		$(BUILD_CC)
$(MACH)_CCC=		$(BUILD_CCC)
$(MACH)_CPP=		$(BUILD_CPP)
$(MACH)_LD=		$(BUILD_LD)
$(MACH)_AS=		$(BUILD_CC)
$(MACH64)_CC=		$(BUILD_CC)
$(MACH64)_CCC=		$(BUILD_CCC)
$(MACH64)_CPP=		$(BUILD_CPP)
$(MACH64)_LD=		$(BUILD_LD)
$(MACH64)_AS=		$(BUILD_CC)

NATIVECC=		$(NATIVEBUILD_CC)
NATIVECCC=		$(NATIVEBUILD_CCC)
NATIVECPP=		$(NATIVEBUILD_CPP)
NATIVEAS=		$(NATIVEBUILD_AS)
NATIVELD=		$(BUILD_LD)

NATIVECC64=		$(NATIVEBUILD_CC)
NATIVECCC64=		$(NATIVEBUILD_CCC)
NATIVECPP64=		$(NATIVEBUILD_CPP)
NATIVEAS64=		$(NATIVEBUILD_AS)
NATIVELD64=		$(NATIVEBUILD_LD)

#
# Makefile.master.64 overrides these settings
#
CC=			$($(MACH)_CC)
CCC=			$($(MACH)_CCC)
CPP=			$($(MACH)_CPP)
AS=			$($(MACH)_AS)
LD=			$($(MACH)_LD)

CC64=			$($(MACH)_CC)
CCC64=			$($(MACH)_CCC)
CPP64=			$($(MACH)_CPP)
AS64=			$($(MACH)_AS)
LD64=			$($(MACH)_LD)

# Pass -Y flag to cpp (method of which is release-dependent)
CCYFLAG=		-Y I,

BDIRECT=	-Wl,-Bdirect
BDYNAMIC=	-Wl,-Bdynamic
BLOCAL=		-Wl,-Blocal
BNODIRECT=	-Wl,-Bnodirect
BREDUCE=	-Wl,-Breduce
BSTATIC=	-Wl,-Bstatic
BSYMBOLIC=	-Wl,-Bsymbolic

ZDEFS=		-Wl,-zdefs
ZDIRECT=	-Wl,-zdirect
ZIGNORE=	-Wl,-zignore
ZINITFIRST=	-Wl,-zinitfirst
ZINTERPOSE=	-Wl,-zinterpose
ZLAZYLOAD=	-Wl,-zlazyload
ZLOADFLTR=	-Wl,-zloadfltr
ZMULDEFS=	-Wl,-zmuldefs
ZNODEFAULTLIB=	-Wl,-znodefaultlib
ZNODEFS=	-Wl,-znodefs
ZNODELETE=	-Wl,-znodelete
ZNODLOPEN=	-Wl,-znodlopen
ZNODUMP=	-Wl,-znodump
ZNOLAZYLOAD=	-Wl,-znolazyload
ZNOLDYNSYM=	-Wl,-znoldynsym
ZNORELOC=	-Wl,-znoreloc
ZNOVERSION=	-Wl,-znoversion
ZRECORD=	-Wl,-zrecord
ZREDLOCSYM=	-Wl,-zredlocsym
ZTEXT=		-Wl,-ztext
ZVERBOSE=	-Wl,-zverbose
ZASSERTDEFLIB=	-Wl,-zassert-deflib
ZGUIDANCE=	-Wl,-zguidance
ZFATALWARNINGS=	-Wl,-zfatal-warnings
ZASLR=		-Wl,-zaslr

$(HAVE_ADJUNCT_PROTO)ZSYSROOT=	-Wl,-zsysroot=$(ADJUNCT_PROTO)

GSHARED=	-shared
CCMT=		-mt

# Handle different PIC models on different ISAs
# (May be overridden by lower-level Makefiles)

sparc_C_PICFLAGS =	-fpic
sparcv9_C_PICFLAGS =	-fpic
i386_C_PICFLAGS =	-fpic
amd64_C_PICFLAGS =	-fpic
aarch64_C_PICFLAGS =	-fpic
C_PICFLAGS =		$($(MACH)_C_PICFLAGS)
C_PICFLAGS64 =		$($(MACH64)_C_PICFLAGS)

sparc_C_BIGPICFLAGS =	-fPIC
sparcv9_C_BIGPICFLAGS =	-fPIC
i386_C_BIGPICFLAGS =	-fPIC
amd64_C_BIGPICFLAGS =	-fPIC
aarch64_C_BIGPICFLAGS =	-fPIC
C_BIGPICFLAGS =		$($(MACH)_C_BIGPICFLAGS)
C_BIGPICFLAGS64 =	$($(MACH64)_C_BIGPICFLAGS)

# CC requires there to be no space between '-K' and 'pic' or 'PIC'.
# and does not support -f
sparc_CC_PICFLAGS =	-_gcc=-fpic
sparcv9_CC_PICFLAGS =	-_gcc=-fPIC
i386_CC_PICFLAGS =	-_gcc=-fpic
amd64_CC_PICFLAGS =	-_gcc=-fpic
aarch64_CC_PICFLAGS =	-_gcc=-fpic
CC_PICFLAGS =		$($(MACH)_CC_PICFLAGS)
CC_PICFLAGS64 =		$($(MACH64)_CC_PICFLAGS)

AS_PICFLAGS=		$(C_PICFLAGS)
AS_BIGPICFLAGS=		$(C_BIGPICFLAGS)

#
# Default label for CTF sections
#
CTFCVTFLAGS=		-L VERSION

#
# Override to pass module-specific flags to ctfmerge.  Currently used only by
# krtld to turn on fuzzy matching, and source-level debugging to inhibit
# stripping.
#
CTFMRGFLAGS=

CTFCONVERT_O		= $(CTFCONVERT) $(CTFCVTFLAGS) $@

# Rules (normally from make.rules) and macros which are used for post
# processing files. Normally, these do stripping of the comment section
# automatically.
#    RELEASE_CM:	Should be edited to reflect the release.
#    POST_PROCESS_O:	Post-processing for `.o' files (typically C source)
#    POST_PROCESS_S_O:	Post-processing for `.o' files built from asssembly
#    POST_PROCESS_CC_O:	Post-processing for `.o' files built from C++
#    POST_PROCESS_A:		Post-processing for `.a' files (currently null).
#    POST_PROCESS_SO:	Post-processing for `.so' files.
#    POST_PROCESS:	Post-processing for executable files (no suffix).
#
# Note that these macros are not completely generalized as they are to be
# used with the file name to be processed following.
#
# It is left as an exercise to Release Engineering to embellish the generation
# of the release comment string.
#
#	If this is a standard development build:
#		compress the comment section (mcs -c)
#		add the standard comment (mcs -a $(RELEASE_CM))
#		add the development specific comment (mcs -a $(DEV_CM))
#
#	If this is an installation build:
#		delete the comment section (mcs -d)
#		add the standard comment (mcs -a $(RELEASE_CM))
#		add the development specific comment (mcs -a $(DEV_CM))
#
#	If this is an release build:
#		delete the comment section (mcs -d)
#		add the standard comment (mcs -a $(RELEASE_CM))
#
# The following list of macros are used in the definition of RELEASE_CM
# which is used to label all binaries in the build:
#
#	RELEASE		Specific release of the build, eg: 5.2
#	RELEASE_MAJOR	Major version number part of $(RELEASE)
#	RELEASE_MINOR	Minor version number part of $(RELEASE)
#	VERSION		Version of the build (alpha, beta, Generic)
#	PATCHID		If this is a patch this value should contain
#			the patchid value (eg: "Generic 100832-01"), otherwise
#			it will be set to $(VERSION)
#	RELEASE_DATE	Date of the Release Build
#	PATCH_DATE	Date the patch was created, if this is blank it
#			will default to the RELEASE_DATE
#
RELEASE_MAJOR=	5
RELEASE_MINOR=	11
RELEASE=	$(RELEASE_MAJOR).$(RELEASE_MINOR)
VERSION=	SunOS Development
PATCHID=	$(VERSION)
RELEASE_DATE=	release date not set
PATCH_DATE=	$(RELEASE_DATE)
RELEASE_CM=	"@($(POUND_SIGN))illumos $(PATCHID) $(PATCH_DATE)"
DEV_CM_TAIL=	development build: $(LOGNAME)
DEV_CM=		"@($(POUND_SIGN))illumos $(DEV_CM_TAIL)"
UTS_LABEL=	$(RELEASE)

#
# The boot banner may be overridden by distributions.  Up to five lines can be
# specified by overriding the BOOTBANNER macros, and any line that expands to
# an empty string will not be printed.  See comments in
# bootbanner_expand_template() for more details about the template string
# format.
#
BOOTBANNER1=	^o Version ^v ^w-bit
BOOTBANNER2=
BOOTBANNER3=
BOOTBANNER4=
BOOTBANNER5=

PROCESS_COMMENT=  @?${MCS} -d -a $(RELEASE_CM) -a $(DEV_CM)
$(RELEASE_BUILD)PROCESS_COMMENT=   @?${MCS} -d -a $(RELEASE_CM)

STRIP_STABS=			   $(STRIP) -x $@
$(SRCDBGBLD)STRIP_STABS=	   :
PROCESS_CTF=			   :

POST_PROCESS_O=
POST_PROCESS_S_O=
POST_PROCESS_CC_O=
POST_PROCESS_A=
POST_PROCESS_SO=	$(PROCESS_COMMENT) $@ ; $(STRIP_STABS) ; \
			$(ELFSIGN_OBJECT)
POST_PROCESS=		$(PROCESS_COMMENT) $@ ; $(PROCESS_CTF) ; \
			$(STRIP_STABS) ; $(ELFSIGN_OBJECT)

#
# PKGARCHIVE specifies the default location where packages should be
# placed if built.
#
$(RELEASE_BUILD)PKGARCHIVESUFFIX=	-nd
PKGARCHIVE=$(SRC)/../../packages/$(MACH)/nightly$(PKGARCHIVESUFFIX)

#
# The repositories will be created with these publisher settings.  To
# update an image to the resulting repositories, this must match the
# publisher name provided to "pkg set-publisher."
#
PKGPUBLISHER_REDIST=	on-nightly
PKGPUBLISHER_NONREDIST=	on-extra

# Indicate whether a given platform has OpenSolaris closed binaries This is
# not intended to be user-facing build configuration, but may be used that way
# for testing.
i386_HAVE_CLOSED_BINS=
sparc_HAVE_CLOSED_BINS=
aarch64_HAVE_CLOSED_BINS=$(POUND_SIGN)
HAVE_CLOSED_BINS=$($(MACH)_HAVE_CLOSED_BINS)

# Allow suffix rules like the below for .S as well as .s
.SUFFIXES: .S

#	Default build rules which perform comment section post-processing.
#
.c:
	$(LINK.c) -o $@ $< $(LDLIBS)
	$(POST_PROCESS)
.c.o:
	$(COMPILE.c) $(OUTPUT_OPTION) $< $(CTFCONVERT_HOOK)
	$(POST_PROCESS_O)
.c.a:
	$(COMPILE.c) -o $% $<
	$(PROCESS_COMMENT) $%
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
.s.o:
	$(COMPILE.s) -o $@ $<
	$(POST_PROCESS_S_O)
.s.a:
	$(COMPILE.s) -o $% $<
	$(PROCESS_COMMENT) $%
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%

.S.o:
	$(COMPILE.s) -o $@ $<
	$(POST_PROCESS_S_O)
.S.a:
	$(COMPILE.s) -o $% $<
	$(PROCESS_COMMENT) $%
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%
.cc:
	$(LINK.cc) -o $@ $< $(LDLIBS)
	$(POST_PROCESS)
.cc.o:
	$(COMPILE.cc) $(OUTPUT_OPTION) $<
	$(POST_PROCESS_CC_O)
.cc.a:
	$(COMPILE.cc) -o $% $<
	$(AR) $(ARFLAGS) $@ $%
	$(PROCESS_COMMENT) $%
	$(RM) $%
.y:
	$(YACC.y) $<
	$(LINK.c) -o $@ y.tab.c $(LDLIBS)
	$(POST_PROCESS)
	$(RM) y.tab.c
.y.o:
	$(YACC.y) $<
	$(COMPILE.c) -o $@ y.tab.c $(CTFCONVERT_HOOK)
	$(POST_PROCESS_O)
	$(RM) y.tab.c
.l:
	$(RM) $*.c
	$(LEX.l) $< > $*.c
	$(LINK.c) -o $@ $*.c -ll $(LDLIBS)
	$(POST_PROCESS)
	$(RM) $*.c
.l.o:
	$(RM) $*.c
	$(LEX.l) $< > $*.c
	$(COMPILE.c) -o $@ $*.c $(CTFCONVERT_HOOK)
	$(POST_PROCESS_O)
	$(RM) $*.c

.bin.o:
	$(COMPILE.b) -o $@ $<
	$(POST_PROCESS_O)

.java.class:
	$(COMPILE.java) $<

# Bourne and Korn shell script message catalog build rules.
# We extract all gettext strings with sed(1) (being careful to permit
# multiple gettext strings on the same line), weed out the dups, and
# build the catalogue with awk(1).

.sh.po .ksh.po:
	$(SED) -n -e ":a"					\
		  -e "h"					\
		  -e "s/.*gettext *\(\"[^\"]*\"\).*/\1/p"	\
		  -e "x"					\
		  -e "s/\(.*\)gettext *\"[^\"]*\"\(.*\)/\1\2/"	\
		  -e "t a"					\
	       $< | sort -u | $(AWK) '{ print "msgid\t" $$0 "\nmsgstr" }' > $@

#
# Python and Perl executable and message catalog build rules.
#
.SUFFIXES: .pl .pm .py .pyc

.pl:
	$(RM) $@;
	$(SED) -e "s@TEXT_DOMAIN@\"$(TEXT_DOMAIN)\"@" $< > $@;
	$(CHMOD) +x $@

.py:
	$(RM) $@; $(SED) \
		-e "1s:^\#!@PYTHON@:\#!$(PYSHEBANG):" \
		-e "1s:^\#!@TOOLS_PYTHON@:\#!$(TOOLS_PYTHON):" \
		< $< > $@; $(CHMOD) +x $@

.py.po:
	$(GNUXGETTEXT) $(GNUXGETFLAGS) -d $(<F:%.py=%) $< ;

.pl.po .pm.po:
	$(XGETTEXT) $(XGETFLAGS) -d $(<F) $< ;
	$(RM)	$@ ;
	$(SED) "/^domain/d" < $(<F).po > $@ ;
	$(RM) $(<F).po

#
# When using xgettext, we want messages to go to the default domain,
# rather than the specified one.  This special version of the
# COMPILE.cpp macro effectively prevents expansion of TEXT_DOMAIN,
# causing xgettext to put all messages into the default domain.
#
CPPFORPO=$(COMPILE.cpp:\"$(TEXT_DOMAIN)\"=TEXT_DOMAIN)

.c.i:
	$(CPPFORPO) $< > $@

.h.i:
	$(CPPFORPO) $< > $@

.y.i:
	$(YACC) -d $<
	$(CPPFORPO) y.tab.c  > $@
	$(RM) y.tab.c

.l.i:
	$(LEX) $<
	$(CPPFORPO) lex.yy.c  > $@
	$(RM) lex.yy.c

.c.po:
	$(CPPFORPO) $< > $<.i
	$(BUILD.po)

.cc.po:
	$(CPPFORPO) $< > $<.i
	$(BUILD.po)

.y.po:
	$(YACC) -d $<
	$(CPPFORPO) y.tab.c  > $<.i
	$(BUILD.po)
	$(RM) y.tab.c

.l.po:
	$(LEX) $<
	$(CPPFORPO) lex.yy.c  > $<.i
	$(BUILD.po)
	$(RM) lex.yy.c

#
# Rules to perform stylistic checks
#
.SUFFIXES: .x .xml .check .xmlchk

.h.check:
	$(DOT_H_CHECK)

.x.check:
	$(DOT_X_CHECK)

.xml.xmlchk:
	$(MANIFEST_CHECK)
